<Project>
    <PropertyGroup>
        <!--
            A flag that indicates whether the current project is a Test project. The value will be set in the Visual
            Studio project files based on whether the project is a test project (as determined by the ProjectType GUID).

            This value is defined here just so that there is a value when no other value is specified. Do not comment this
            value out unless you know what you are doing!
        -->
        <IsTest Condition=" '$(IsTest)' == '' ">$(AssemblyName.StartsWith('Test.Unit').ToString().ToLower())</IsTest>
    </PropertyGroup>

    <!-- Build configuration -->
    <PropertyGroup>
        <!--
            A flag indicating whether warnings should be treated as errors by the compiler. This value is set
            for all projects that include the MsBuild.Projects.XXXX NuGet package.
        -->
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

        <!--
            The platform against which the code should be compiled. Note that the target should not have space in it,
            i.e. AnyCPU, x86, x64 etc.
        -->
        <PlatformTarget>AnyCPU</PlatformTarget>

        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    </PropertyGroup>

    <!-- Execute code analysis after the build -->
    <PropertyGroup>
        <!--
            A flag that indicates whether or not the code analysis should be executed immediately after the compilation
            process is complete.
        -->
        <ShouldPerformCodeAnalysis Condition=" '$(ShouldPerformCodeAnalysis)' == '' ">true</ShouldPerformCodeAnalysis>
        <!--
            The code analysis rule set that should be used for non-test assemblies.
        -->
        <CodeAnalysisRuleSet Condition=" '$(IsTest)' == 'false' ">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\default.ruleset'))</CodeAnalysisRuleSet>
        <!--
            The code analysis rule set that should be used for test assemblies. If no code analysis should be executed on test
            assemblies then it can be turned off in the settings for the different build configurations below.
        -->
        <CodeAnalysisRuleSet Condition=" '$(IsTest)' == 'true' ">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\test.ruleset'))</CodeAnalysisRuleSet>
        <!--
            The culture which will be used by the code analysis when searching for spelling errors. The culture name should
            be formatted using the .NET culture format.
        -->
        <CodeAnalysisCulture>en-US</CodeAnalysisCulture>
    </PropertyGroup>

    <!-- Strong name the binaries -->
    <PropertyGroup>
        <!--
            A flag that indicates whether or not the assemblies should be strong named during the compilation process.
        -->
        <ShouldSign Condition=" '$(ShouldSign)' == '' ">false</ShouldSign>
        <SignAssembly Condition=" '$(ShouldSign)' == 'true' ">false</SignAssembly>
        <DelaySign Condition=" '$(ShouldSign)' == 'true' ">false</DelaySign>
        <!--
            The full path of the key file that will be used to sign the assemblies during the compilation process.
        -->
        <AssemblyOriginatorKeyFile Condition=" '$(ShouldSign)' == 'true' "></AssemblyOriginatorKeyFile>
    </PropertyGroup>

    <!-- Compiler specific configurations -->
    <PropertyGroup>
        <!--
            Indicates what the warning level is for the C# compiler.
        -->
        <WarningLevel>4</WarningLevel>

        <!--
            Don't care about the XML documentation for unit test projects
        -->
        <NoWarn Condition=" '$(IsTest)' == 'true' ">1591;$(NoWarn)</NoWarn>

        <!--
            Define any additional constants for the C# compiler. Multiple constants should be
            separated by a semi-colon (;).
        -->
        <DefineConstants></DefineConstants>
    </PropertyGroup>

    <!--
        Debug configuration
    -->
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <DefineConstants>CODE_ANALYSIS;INTERNALS_VISIBLE_TO;$(DefineConstants)</DefineConstants>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <DefineDebug>true</DefineDebug>
        <DefineTrace>true</DefineTrace>
        <Optimize>false</Optimize>
        <RunCodeAnalysis>false</RunCodeAnalysis>
        <RunAnalyzersDuringBuild Condition=" '$(ShouldPerformCodeAnalysis)' != 'true' ">false</RunAnalyzersDuringBuild>
        <RunAnalyzersDuringBuild Condition=" '$(ShouldPerformCodeAnalysis)' == 'true' ">true</RunAnalyzersDuringBuild>
    </PropertyGroup>

    <!--
        Release configuration
    -->
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DefineConstants></DefineConstants>
        <DebugSymbols>false</DebugSymbols>
        <DebugType>pdbonly</DebugType>
        <DefineDebug>false</DefineDebug>
        <DefineTrace>true</DefineTrace>
        <Optimize>true</Optimize>
        <RunCodeAnalysis>false</RunCodeAnalysis>
        <RunAnalyzersDuringBuild Condition=" '$(ShouldPerformCodeAnalysis)' != 'true' ">false</RunAnalyzersDuringBuild>
        <RunAnalyzersDuringBuild Condition=" '$(ShouldPerformCodeAnalysis)' == 'true' ">true</RunAnalyzersDuringBuild>
    </PropertyGroup>

    <!-- Generate the XML documentation file -->
    <PropertyGroup>
        <!--
            The full file path where the XML documentation file should be created.
        -->
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <GenerateDocumentationFile Condition=" '$(IsTest)' == 'false' ">true</GenerateDocumentationFile>
    </PropertyGroup>

    <!-- Default includes -->
    <ItemGroup>
        <AdditionalFiles Include="$(MSBuildThisFileDirectory)\stylecop.json" />
    </ItemGroup>
    <ItemGroup>
    <CodeAnalysisDictionary Include="$(MSBuildThisFileDirectory)\CustomDictionary.xml">
        <Link>CustomDictionary.xml</Link>
    </CodeAnalysisDictionary>
  </ItemGroup>
</Project>