<?xml version="1.0" encoding="utf-8"?>
<Project
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <!-- Note the current script is not meant to be imported! -->
        <ExistsNBuildKitBuildSteps>true</ExistsNBuildKitBuildSteps>
    </PropertyGroup>
    <PropertyGroup>
        <BuildStepsShowHelp>$(MSBuildThisFileDirectory)..\shared.show.help.msbuild</BuildStepsShowHelp>

        <BuildStepsPrepareWorkspace>$(MSBuildThisFileDirectory)..\shared.prepare.workspace.msbuild</BuildStepsPrepareWorkspace>
        <BuildStepsPrepareRestoreNuGet>$(MSBuildThisFileDirectory)..\shared.prepare.nuget.restore.msbuild</BuildStepsPrepareRestoreNuGet>

        <BuildStepsPrepareGetIssueIds>$(MSBuildThisFileDirectory)..\shared.prepare.getissueids.msbuild</BuildStepsPrepareGetIssueIds>
        <BuildStepsPrepareVcsBranch>$(MSBuildThisFileDirectory)..\shared.prepare.vcssetbranch.msbuild</BuildStepsPrepareVcsBranch>
        <BuildStepsPrepareGetVersion>$(MSBuildThisFileDirectory)..\shared.prepare.getversion.msbuild</BuildStepsPrepareGetVersion>
        <BuildStepsPrepareVcsMerge>$(MSBuildThisFileDirectory)..\shared.prepare.vcsmergetotarget.msbuild</BuildStepsPrepareVcsMerge>
        <BuildStepsPrepareTagVcs>$(MSBuildThisFileDirectory)..\shared.prepare.tag.vcs.msbuild</BuildStepsPrepareTagVcs>
        <BuildStepsPrepareVcsInfo>$(MSBuildThisFileDirectory)..\shared.prepare.vcsinfo.msbuild</BuildStepsPrepareVcsInfo>

        <BuildStepsPrepareReleaseNotes>$(MSBuildThisFileDirectory)..\shared.prepare.gatherreleasenotes.msbuild</BuildStepsPrepareReleaseNotes>

        <BuildStepsPrepareRestoreNpm>$(MSBuildThisFileDirectory)..\shared.prepare.npm.restore.msbuild</BuildStepsPrepareRestoreNpm>
        <BuildStepsPrepareRestoreBower>$(MSBuildThisFileDirectory)..\shared.prepare.bower.restore.msbuild</BuildStepsPrepareRestoreBower>

        <BuildStepsPrepareCopyNuGet>$(MSBuildThisFileDirectory)..\shared.prepare.copy.nuget.msbuild</BuildStepsPrepareCopyNuGet>
        <BuildStepsPrepareCopyHttp>$(MSBuildThisFileDirectory)..\shared.prepare.copy.http.msbuild</BuildStepsPrepareCopyHttp>
        <BuildStepsPrepareCopyFiles>$(MSBuildThisFileDirectory)..\shared.prepare.copy.file.msbuild</BuildStepsPrepareCopyFiles>
        <BuildStepsPrepareCopyArchive>$(MSBuildThisFileDirectory)..\shared.prepare.copy.archive.msbuild</BuildStepsPrepareCopyArchive>
        <BuildStepsPrepareFileHashes>$(MSBuildThisFileDirectory)..\shared.prepare.getfilehashes.msbuild</BuildStepsPrepareFileHashes>

        <BuildStepsPrepareUpdateProjectInfo>$(MSBuildThisFileDirectory)build.prepare.updateprojectInfo.msbuild</BuildStepsPrepareUpdateProjectInfo>

        <BuildStepsPrepareGenerateLicenses>$(MSBuildThisFileDirectory)build.prepare.generatelicenses.msbuild</BuildStepsPrepareGenerateLicenses>
        <BuildStepsPrepareGenerateFiles>$(MSBuildThisFileDirectory)build.prepare.generatefiles.msbuild</BuildStepsPrepareGenerateFiles>

        <BuildStepsBuildVisualStudioSolution>$(MSBuildThisFileDirectory)build.binaries.msbuild</BuildStepsBuildVisualStudioSolution>
        <BuildStepsBuildTargetsAssembly>$(MSBuildThisFileDirectory)..\shared.bootstrap.build.tasks.msbuild</BuildStepsBuildTargetsAssembly>
        <BuildStepsGenerateTargetsFile>$(MSBuildThisFileDirectory)..\shared.bootstrap.generate.targetsfile.msbuild</BuildStepsGenerateTargetsFile>

        <BuildStepsUnitTestNUnitV2>$(MSBuildThisFileDirectory)build.test.unit.nunit.v2.msbuild</BuildStepsUnitTestNUnitV2>
        <BuildStepsUnitTestNUnitV3>$(MSBuildThisFileDirectory)build.test.unit.nunit.v3.msbuild</BuildStepsUnitTestNUnitV3>
        <BuildStepsUnitTestMsTest>$(MSBuildThisFileDirectory)build.test.unit.mstest.msbuild</BuildStepsUnitTestMsTest>
        <BuildStepsUnitTestVsTest>$(MSBuildThisFileDirectory)build.test.unit.vstest.msbuild</BuildStepsUnitTestVsTest>

        <BuildStepsAnalyzeXml>$(MSBuildThisFileDirectory)build.analyze.xml.msbuild</BuildStepsAnalyzeXml>
        <BuildStepsAnalyzeBinariesFxCop>$(MSBuildThisFileDirectory)build.analyze.binaries.fxcop.msbuild</BuildStepsAnalyzeBinariesFxCop>

        <BuildStepsBuildILMerge>$(MSBuildThisFileDirectory)build.ilmerge.msbuild</BuildStepsBuildILMerge>

        <BuildStepsBuildWyam>$(MSBuildThisFileDirectory)build.wyam.msbuild</BuildStepsBuildWyam>

        <BuildStepsPackNuGet>$(MSBuildThisFileDirectory)build.pack.nuget.msbuild</BuildStepsPackNuGet>
        <BuildStepsPackZip>$(MSBuildThisFileDirectory)build.pack.zip.msbuild</BuildStepsPackZip>
    </PropertyGroup>
    <ItemGroup Condition=" '$(ShouldLoadAvailableStepMetadata)' == 'true' ">
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareWorkspace)'))">
            <Description>
                Clears the existing build artifacts from the workspace and creates the required directories. Clearing the existing build artifacts is only executed if the $(ShouldClean) property is set to 'true'.
            </Description>
            <Id>BuildStepsPrepareWorkspace</Id>
            <Name>Build - prepare workspace</Name>
            <Path>$(BuildStepsPrepareWorkspace)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareRestoreNuGet)'))">
            <Description>
                Restores the NuGet packages as specified in the 'packages.config' file in the workspace. Additionally also restores the NuGet packages as specified in the nBuildKit specific 'packages.config' files.
            </Description>
            <Id>BuildStepsPrepareRestoreNuGet</Id>
            <Name>Build - restore NuGet packages</Name>
            <Path>$(BuildStepsPrepareRestoreNuGet)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareGetIssueIds)'))">
            <Description>
                Gets the issue IDs from the commits on the current branch and stores them in a temp file for later use.
            </Description>
            <Id>BuildStepsPrepareGetIssueIds</Id>
            <Name>Build - get issue IDs</Name>
            <Path>$(BuildStepsPrepareGetIssueIds)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareVcsBranch)'))">
            <Description>
                When building from a GIT repository on a build server ensures that the current checkout has the same branch name as the remote tracking branch.
            </Description>
            <Id>BuildStepsPrepareVcsBranch</Id>
            <Name>Build - prepare VCS state</Name>
            <Path>$(BuildStepsPrepareVcsBranch)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareGetVersion)'))">
            <Description>
                 Gathers version information and stores it in a temporary file for use by the rest of the build process.
            </Description>
            <Id>BuildStepsPrepareGetVersion</Id>
            <Name>Build - gather version numbers</Name>
            <Path>$(BuildStepsPrepareGetVersion)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareVcsMerge)'))">
            <Description>
                Merges the current changes to the designated target branches (specified by @(BranchMergeTarget)).
            </Description>
            <Id>BuildStepsPrepareVcsMerge</Id>
            <Name>Build - merge to target branches</Name>
            <Path>$(BuildStepsPrepareVcsMerge)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareTagVcs)'))">
            <Description>
                Tags the current commit with the version number. Currently supported version control systems are TFS and GIT.
            </Description>
            <Id>BuildStepsPrepareTagVcs</Id>
            <Name>Build - tag current commit</Name>
            <Path>$(BuildStepsPrepareTagVcs)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareVcsInfo)'))">
            <Description>
                Stores the Version Control System (VCS) information in a file for later use. Currently supported version control systems is GIT
            </Description>
            <Id>BuildStepsPrepareVcsInfo</Id>
            <Name>Build - gather VCS information</Name>
            <Path>$(BuildStepsPrepareVcsInfo)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareReleaseNotes)'))">
            <Description>
                Gathers the release notes and stores them for later use during the build process.
            </Description>
            <Id>BuildStepsPrepareReleaseNotes</Id>
            <Name>Build - gather release notes</Name>
            <Path>$(BuildStepsPrepareReleaseNotes)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareRestoreNpm)'))">
            <Description>
                Restores all the NPM packages for the project.
            </Description>
            <Id>BuildStepsPrepareRestoreNpm</Id>
            <Name>Build - restore NPM packages</Name>
            <Path>$(BuildStepsPrepareRestoreNpm)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareRestoreBower)'))">
            <Description>
                Restores all the Bower packages for the project.
            </Description>
            <Id>BuildStepsPrepareRestoreBower</Id>
            <Name>Build - restore Bower packages</Name>
            <Path>$(BuildStepsPrepareRestoreBower)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareCopyNuGet)'))">
            <Description>
                Copies one or more files from a NuGet package.
            </Description>
            <Id>BuildStepsPrepareCopyNuGet</Id>
            <Name>Build - copy nuget</Name>
            <Path>$(BuildStepsPrepareCopyNuGet)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareCopyHttp)'))">
            <Description>
                Copies one or more files from a set of URLs.
            </Description>
            <Id>BuildStepsPrepareCopyHttp</Id>
            <Name>Build - copy from URL</Name>
            <Path>$(BuildStepsPrepareCopyHttp)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareCopyFiles)'))">
            <Description>
                Copies one or more files from the file system.
            </Description>
            <Id>BuildStepsPrepareCopyFiles</Id>
            <Name>Build - copy files</Name>
            <Path>$(BuildStepsPrepareCopyFiles)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareCopyArchive)'))">
            <Description>
                Copies one or more files from an archive or zip file.
            </Description>
            <Id>BuildStepsPrepareCopyArchive</Id>
            <Name>Build - copy archive</Name>
            <Path>$(BuildStepsPrepareCopyArchive)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareFileHashes)'))">
            <Description>
                Calculate the hash of one or more files.
            </Description>
            <Id>BuildStepsPrepareFileHashes</Id>
            <Name>Build - Calculate file hashes</Name>
            <Path>$(BuildStepsPrepareFileHashes)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareUpdateProjectInfo)'))">
            <Description>
                Updates all referenced Visual Studio project files with the version numbers, company information, copyright information and optionally build time and build information.
            </Description>
            <Id>BuildStepsPrepareUpdateProjectInfo</Id>
            <Name>Build - update visual studio project files</Name>
            <Path>$(BuildStepsPrepareUpdateProjectInfo)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareGenerateLicenses)'))">
            <Description>
                Generates an XML file containing the licenses for all the NuGet packages in use for the current build.
            </Description>
            <Id>BuildStepsPrepareGenerateLicenses</Id>
            <Name>Build - generate license information</Name>
            <Path>$(BuildStepsPrepareGenerateLicenses)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareGenerateFiles)'))">
            <Description>
                Generates one or more files from a set of template files.
            </Description>
            <Id>BuildStepsPrepareGenerateFiles</Id>
            <Name>Build - generate files</Name>
            <Path>$(BuildStepsPrepareGenerateFiles)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsBuildVisualStudioSolution)'))">
            <Description>
                Builds the binaries from a given Visual Studio solution.
            </Description>
            <Id>BuildStepsBuildVisualStudioSolution</Id>
            <Name>Build - compile Visual Studio solution</Name>
            <Path>$(BuildStepsBuildVisualStudioSolution)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsBuildTargetsAssembly)'))">
            <Description>
                Builds Visual Studio projects that contain MsBuild Tasks. Separate from building the standard Visual Studio solutions so that it is possible to build MsBuild tasks that will be used in the build process.
            </Description>
            <Id>BuildStepsBuildTargetsAssembly</Id>
            <Name>Build - compile MsBuild task assembly</Name>
            <Path>$(BuildStepsBuildTargetsAssembly)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsGenerateTargetsFile)'))">
            <Description>
                Generates a targets file for use with an MsBuild tasks assembly.
            </Description>
            <Id>BuildStepsGenerateTargetsFile</Id>
            <Name>Build - generate MsBuild targets file</Name>
            <Path>$(BuildStepsGenerateTargetsFile)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsUnitTestNUnitV2)'))">
            <Description>
                Executes the unit tests with NUnit V2 and measures code coverage with OpenCover.
            </Description>
            <Id>BuildStepsUnitTestNUnitV2</Id>
            <Name>Build - execute nUnit V2</Name>
            <Path>$(BuildStepsUnitTestNUnitV2)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsUnitTestNUnitV3)'))">
            <Description>
                Executes the unit tests with NUnit V3 and measures code coverage with OpenCover.
            </Description>
            <Id>BuildStepsUnitTestNUnitV3</Id>
            <Name>Build - execute nUnit V3</Name>
            <Path>$(BuildStepsUnitTestNUnitV3)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsUnitTestMsTest)'))">
            <Description>
                Executes the unit tests with MsTest and measures code coverage with OpenCover.
            </Description>
            <Id>BuildStepsUnitTestMsTest</Id>
            <Name>Build - execute MsTest</Name>
            <Path>$(BuildStepsUnitTestMsTest)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsUnitTestVsTest)'))">
            <Description>
                Executes the unit tests with VsTest and measures code coverage.
            </Description>
            <Id>BuildStepsUnitTestVsTest</Id>
            <Name>Build - execute VsTest</Name>
            <Path>$(BuildStepsUnitTestVsTest)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsAnalyzeXml)'))">
            <Description>
                Analyzes one or more XML files based on the provided XSD.
            </Description>
            <Id>BuildStepsAnalyzeXml</Id>
            <Name>Build - validate XML</Name>
            <Path>$(BuildStepsAnalyzeXml)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsAnalyzeBinariesFxCop)'))">
            <Description>
                Analyzes the binary files with FxCop.
            </Description>
            <Id>BuildStepsAnalyzeBinariesFxCop</Id>
            <Name>Build - validate using FxCop</Name>
            <Path>$(BuildStepsAnalyzeBinariesFxCop)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsBuildILMerge)'))">
            <Description>
                IL merges assemblies.
            </Description>
            <Id>BuildStepsBuildILMerge</Id>
            <Name>Build - IL merge assemblies</Name>
            <Path>$(BuildStepsBuildILMerge)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsBuildWyam)'))">
            <Description>
                Generates documentation pages using wyam.io.
            </Description>
            <Id>BuildStepsBuildWyam</Id>
            <Name>Build - generate documentation with Wyam</Name>
            <Path>$(BuildStepsBuildWyam)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPackNuGet)'))">
            <Description>
                Generates the NuGet packages.
            </Description>
            <Id>BuildStepsPackNuGet</Id>
            <Name>Build - create NuGet packages</Name>
            <Path>$(BuildStepsPackNuGet)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPackZip)'))">
            <Description>
                Generates one or more ZIP archives.
            </Description>
            <Id>BuildStepsPackZip</Id>
            <Name>Build - create ZIP archives</Name>
            <Path>$(BuildStepsPackZip)</Path>
        </AvailableStepMetadata>
    </ItemGroup>
</Project>
